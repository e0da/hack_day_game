// Generated by CoffeeScript 1.7.1
(function() {
  var $, Assets, BounceEnemy, Cannonball, Combatant, Controller, Enemy, Entity, Explosion, Game, Player, Projectile, Ship,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  Controller = (function() {
    var KEYS;

    KEYS = {
      UP: 38,
      DOWN: 40,
      LEFT: 37,
      RIGHT: 39,
      SPACE: 32,
      ESC: 27,
      Y: 121,
      M: 109
    };

    function Controller(game) {
      var _ref;
      this.game = game;
      _ref = [false, false, false], this.left = _ref[0], this.right = _ref[1], this.fire = _ref[2];
      $(document).keydown((function(_this) {
        return function(event) {
          return _this.keydown(event);
        };
      })(this));
      $(document).keyup((function(_this) {
        return function(event) {
          return _this.keyup(event);
        };
      })(this));
      $(document).keypress((function(_this) {
        return function(event) {
          return _this.keypress(event);
        };
      })(this));
    }

    Controller.prototype.keydown = function(event) {
      switch (event.keyCode) {
        case KEYS.LEFT:
          event.preventDefault();
          return this.left = true;
        case KEYS.RIGHT:
          event.preventDefault();
          return this.right = true;
        case KEYS.SPACE:
          event.preventDefault();
          return this.fire = true;
      }
    };

    Controller.prototype.keyup = function(event) {
      switch (event.keyCode) {
        case KEYS.LEFT:
          event.preventDefault();
          return this.left = false;
        case KEYS.RIGHT:
          event.preventDefault();
          return this.right = false;
        case KEYS.SPACE:
          event.preventDefault();
          return this.fire = false;
      }
    };

    Controller.prototype.keypress = function(event) {
      switch (event.keyCode) {
        case KEYS.Y:
          return this.game.assets.toggleBgMusicSelection();
        case KEYS.M:
          return this.game.assets.toggleBgMusicPlayback();
      }
    };

    return Controller;

  })();

  Entity = (function() {
    function Entity(game) {
      this.game = game;
      if (this.x == null) {
        this.x = 0;
      }
      if (this.y == null) {
        this.y = 0;
      }
      if (this.width == null) {
        this.width = 0;
      }
      if (this.height == null) {
        this.height = 0;
      }
      if (this.speed == null) {
        this.speed = 0;
      }
      if (this.image == null) {
        this.image = null;
      }
    }

    Entity.prototype.move = function(x, y) {
      this.x = x;
      this.y = y;
    };

    Entity.prototype.render = function() {
      return this.game.ctx.drawImage(this.image, this.renderBox().offset().x(), this.renderBox().offset().y(), this.renderBox().width(), this.renderBox().height());
    };

    Entity.prototype.box = function() {
      return {
        left: (function(_this) {
          return function() {
            return _this.x;
          };
        })(this),
        right: (function(_this) {
          return function() {
            return _this.x + _this.width;
          };
        })(this),
        top: (function(_this) {
          return function() {
            return _this.y;
          };
        })(this),
        bottom: (function(_this) {
          return function() {
            return _this.y + _this.height;
          };
        })(this)
      };
    };

    Entity.prototype.renderBox = function() {
      var scale;
      scale = 1.2;
      return {
        width: (function(_this) {
          return function() {
            return _this.width * scale;
          };
        })(this),
        height: (function(_this) {
          return function() {
            return _this.height * scale;
          };
        })(this),
        offset: (function(_this) {
          return function() {
            return {
              x: function() {
                return _this.x - (0.5 * scale * _this.width);
              },
              y: function() {
                return _this.y + (0.5 * scale * _this.height);
              }
            };
          };
        })(this)
      };
    };

    Entity.prototype.isOutOfBounds = function() {
      return this.box().left() < 0 || this.box().right() > this.game.width || this.box().top() < 0 || this.box().bottom() > this.game.height;
    };

    return Entity;

  })();

  Combatant = (function(_super) {
    __extends(Combatant, _super);

    function Combatant(game) {
      this.game = game;
      Combatant.__super__.constructor.apply(this, arguments);
      if (this.fireRate == null) {
        this.fireRate = 0;
      }
      this.lastFired = 0;
    }

    Combatant.prototype.canFire = function() {
      var now;
      now = this.game.timestamp();
      if ((now - this.lastFired) >= (this.fireRate * 1000)) {
        this.lastFired = now;
        return true;
      } else {
        return false;
      }
    };

    return Combatant;

  })(Entity);

  Player = (function(_super) {
    __extends(Player, _super);

    function Player(game) {
      this.game = game;
      this.image = this.game.assets.cannon;
      Player.__super__.constructor.apply(this, arguments);
      this.width = 50;
      this.height = 100;
      this.speed = 5;
      this.fireRate = 0.25;
      this.$canvas = $(this.game.canvas);
    }

    Player.prototype.update = function() {
      if (this.game.controller.left) {
        if (!(this.x < 0)) {
          this.move(this.x - this.speed);
        }
      }
      if (this.game.controller.right) {
        if (!(this.x > this.game.width)) {
          this.move(this.x + this.speed);
        }
      }
      if (this.game.controller.fire && this.canFire()) {
        return this.fire();
      }
    };

    Player.prototype.move = function(x) {
      if (x == null) {
        x = null;
      }
      this.y = this.$canvas.height() - this.renderBox().height();
      if (!x) {
        return Player.__super__.move.call(this, this.x, this.y);
      }
      return Player.__super__.move.call(this, x, this.y);
    };

    Player.prototype.fire = function() {
      return new Cannonball(this.x, this.y, this.game);
    };

    return Player;

  })(Combatant);

  Ship = (function(_super) {
    __extends(Ship, _super);

    function Ship(game) {
      this.game = game;
      if (this.image == null) {
        this.image = this.game.assets.friendlyShip;
      }
      Ship.__super__.constructor.apply(this, arguments);
      this.x = this.game.width + this.width;
      this.y = this.height;
      this.width = 100;
      this.height = 100;
      this.speed = 10;
      this.fireRate = 1;
    }

    Ship.prototype.update = function() {
      this.move(this.x - this.speed);
      if (this.x < -this.width) {
        return this.move(this.game.width + this.width);
      }
    };

    Ship.prototype.move = function(x) {
      return Ship.__super__.move.call(this, x, this.y);
    };

    return Ship;

  })(Combatant);

  Enemy = (function(_super) {
    __extends(Enemy, _super);

    function Enemy(game) {
      this.game = game;
      this.image = this.game.assets.enemyShip;
      Enemy.__super__.constructor.apply(this, arguments);
    }

    return Enemy;

  })(Ship);

  BounceEnemy = (function(_super) {
    __extends(BounceEnemy, _super);

    function BounceEnemy(game) {
      this.game = game;
      BounceEnemy.__super__.constructor.apply(this, arguments);
      this.y = this.height;
      this.x = -this.width;
      this.move(this.x, this.y);
      this.isRight = true;
      this.sinIndex = 0;
    }

    BounceEnemy.prototype.update = function() {
      this.y = this.height + 20 * Math.sin(this.sinIndex / 10);
      this.sinIndex += 1;
      if (this.isRight) {
        this.move(this.x + this.speed);
      } else {
        this.move(this.x - this.speed);
      }
      if (this.x < 0) {
        this.isRight = true;
        this.image = this.game.assets.enemyShip;
      }
      if (this.x > this.game.width - this.width) {
        this.isRight = false;
        return this.image = this.game.assets.enemyShipLeft;
      }
    };

    BounceEnemy.prototype.move = function(x) {
      return BounceEnemy.__super__.move.call(this, x);
    };

    return BounceEnemy;

  })(Enemy);

  Projectile = (function(_super) {
    __extends(Projectile, _super);

    function Projectile(game) {
      this.game = game;
      Projectile.__super__.constructor.apply(this, arguments);
      if (this.strenth == null) {
        this.strenth = 0;
      }
      this.game.addProjectile(this);
    }

    Projectile.prototype.update = function() {
      if (this.isOutOfBounds()) {
        return this.game.removeProjectile(this);
      }
    };

    return Projectile;

  })(Entity);

  Cannonball = (function(_super) {
    __extends(Cannonball, _super);

    function Cannonball(x, y, game) {
      this.x = x;
      this.y = y;
      this.game = game;
      this.image = this.game.assets.cannonball;
      Cannonball.__super__.constructor.call(this, this.game);
      this.width = 25;
      this.height = this.width;
      this.speed = 20;
      this.strenth = 1;
    }

    Cannonball.prototype.update = function() {
      Cannonball.__super__.update.apply(this, arguments);
      return this.move(this.x, this.y - this.speed);
    };

    return Cannonball;

  })(Projectile);

  Explosion = (function(_super) {
    __extends(Explosion, _super);

    function Explosion(x, y, game) {
      this.x = x;
      this.y = y;
      this.game = game;
      this.image = this.game.assets.explosion;
      Explosion.__super__.constructor.call(this, this.game);
      this.width = 150;
      this.height = this.width;
      this.speed = 0;
      this.duration = 250;
      this.born = this.game.timestamp();
      this.game.addExplosion(this);
      this.game.assets.boom();
    }

    Explosion.prototype.update = function() {
      if (this.game.timestamp() - this.born > this.duration) {
        return this.game.removeExplosion(this);
      }
    };

    return Explosion;

  })(Entity);

  Game = (function() {
    function Game(assets) {
      this.assets = assets;
      this.dt = null;
      this.last = this.timestamp();
      this.step = 1 / 60;
      this.width = 800;
      this.height = 600;
      this.canvas = document.createElement('canvas');
      this.canvas.className = 'js-game';
      this.setCanvasSize();
      this.ctx = this.canvas.getContext('2d');
      this.projectiles = [];
      this.explosions = [];
      this.enemies = [this.randomShip()];
      $('body').append(this.canvas);
      this.controller = new Controller(this);
      this.player = new Player(this);
    }

    Game.prototype.timestamp = function() {
      return window.performance.now();
    };

    Game.prototype.update = function() {
      this.player.update();
      this.updateEnemies();
      this.updateProjectiles();
      this.updateExplosions();
      this.handleCollisions();
      return this.randomAddEnemy();
    };

    Game.prototype.render = function() {
      this.renderBackground();
      this.renderEnemies();
      this.renderProjectiles();
      this.player.render();
      return this.renderExplosions();
    };

    Game.prototype.frame = function() {
      var now;
      now = this.timestamp();
      this.dt = this.dt + Math.min(1, (now - this.last) / 1000);
      while (this.dt > this.step) {
        this.dt = this.dt - this.step;
        this.update();
      }
      this.render();
      this.last = now;
      return window.requestAnimationFrame((function(_this) {
        return function() {
          return _this.frame();
        };
      })(this));
    };

    Game.prototype.run = function() {
      window.requestAnimationFrame((function(_this) {
        return function() {
          return _this.frame();
        };
      })(this));
      return this.assets.toggleBgMusicPlayback();
    };

    Game.prototype.renderBackground = function() {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    Game.prototype.updateExplosions = function() {
      var explosion, _results;
      _results = [];
      for (explosion in this.explosions) {
        _results.push(this.explosions[explosion].update());
      }
      return _results;
    };

    Game.prototype.renderExplosions = function() {
      var explosion, _results;
      _results = [];
      for (explosion in this.explosions) {
        _results.push(this.explosions[explosion].render());
      }
      return _results;
    };

    Game.prototype.updateProjectiles = function() {
      var projectile, _results;
      _results = [];
      for (projectile in this.projectiles) {
        _results.push(this.projectiles[projectile].update());
      }
      return _results;
    };

    Game.prototype.renderProjectiles = function() {
      var projectile, _results;
      _results = [];
      for (projectile in this.projectiles) {
        _results.push(this.projectiles[projectile].render());
      }
      return _results;
    };

    Game.prototype.updateEnemies = function() {
      var enemy, _results;
      _results = [];
      for (enemy in this.enemies) {
        _results.push(this.enemies[enemy].update());
      }
      return _results;
    };

    Game.prototype.renderEnemies = function() {
      var enemy, _results;
      _results = [];
      for (enemy in this.enemies) {
        _results.push(this.enemies[enemy].render());
      }
      return _results;
    };

    Game.prototype.handleCollisions = function() {
      var enemy, projectile, _results;
      _results = [];
      for (projectile in this.projectiles) {
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (enemy in this.enemies) {
            if ((this.projectiles[projectile] !== void 0) && (this.isCollision(this.projectiles[projectile], this.enemies[enemy]))) {
              this.killEnemy(this.enemies[enemy]);
              _results1.push(this.removeProjectile(this.projectiles[projectile]));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Game.prototype.killEnemy = function(enemy) {
      this.enemies.splice(this.enemies.indexOf(enemy), 1);
      return this.addExplosion(new Explosion(enemy.x, enemy.y, this));
    };

    Game.prototype.addEnemy = function() {
      if (this.enemies.length < 10) {
        return this.enemies.push(this.randomShip());
      }
    };

    Game.prototype.randomShip = function() {
      var type;
      type = Math.floor(Math.random() * 3);
      switch (type) {
        case 0:
          return new Ship(this);
        default:
          return new BounceEnemy(this);
      }
    };

    Game.prototype.randomAddEnemy = function() {
      if (1 === Math.floor(Math.random() * 50)) {
        return this.addEnemy();
      }
    };

    Game.prototype.isCollision = function(entity1, entity2) {
      var point, points;
      points = [];
      points.push({
        x: entity1.box().left(),
        y: entity1.box().top()
      });
      points.push({
        x: entity1.box().right(),
        y: entity1.box().top()
      });
      points.push({
        x: entity1.box().left(),
        y: entity1.box().bottom()
      });
      points.push({
        x: entity1.box().right(),
        y: entity1.box().bottom()
      });
      for (point in points) {
        if (this.isPointInEntity(points[point], entity2)) {
          return true;
        }
      }
      return false;
    };

    Game.prototype.isPointInEntity = function(point, entity) {
      return point.x > entity.box().left() && point.x < (entity.box().right()) && point.y > entity.box().top() && point.y < (entity.box().bottom());
    };

    Game.prototype.addProjectile = function(projectile) {
      return this.projectiles.push(projectile);
    };

    Game.prototype.removeProjectile = function(projectile) {
      return this.projectiles.splice(this.projectiles.indexOf(projectile), 1);
    };

    Game.prototype.addExplosion = function(explosion) {
      return this.explosions.push(explosion);
    };

    Game.prototype.removeExplosion = function(explosion) {
      return this.explosions.splice(this.explosions.indexOf(explosion), 1);
    };

    Game.prototype.setCanvasSize = function() {
      return setInterval((function(_this) {
        return function() {
          _this.width = $(window).innerWidth();
          _this.height = $(window).innerHeight();
          _this.canvas.width = _this.width;
          _this.canvas.height = _this.height;
          return _this.player.move();
        };
      })(this), 100);
    };

    return Game;

  })();

  Assets = (function() {
    function Assets(callback) {
      this.loadAssets(callback);
      this.cannon = this.createImage('cannon.png');
      this.cannonball = this.createImage('cannonball.png');
      this.enemyShip = this.createImage('enemy-ship.png');
      this.enemyShipLeft = this.createImage('enemy-ship-left.png');
      this.explosion = this.createImage('explosion.png');
      this.friendlyShip = this.createImage('friendly-ship.png');
      this.bgMusic = this.createAudio('drunken-lullabies.mp3', {
        volume: 0.5,
        loop: true
      });
      this.boomSound = this.createAudio('boom.mp3');
    }

    Assets.prototype.loadAssets = function(callback) {
      var style;
      style = document.createElement('style');
      style.innerText = ".js-game {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 999999;\n}";
      return $('head').append(style);
    };

    Assets.prototype.createImage = function(name) {
      var img;
      img = document.createElement('img');
      img.src = "assets/" + name;
      return img;
    };

    Assets.prototype.createAudio = function(name, options) {
      var audio;
      if (options == null) {
        options = {};
      }
      audio = document.createElement('audio');
      audio.src = "assets/" + name;
      audio.loop = options.loop || false;
      audio.volume = options.volume || 0.5;
      return audio;
    };

    Assets.prototype.boom = function() {
      return this.boomSound.cloneNode().play();
    };

    Assets.prototype.toggleBgMusicSelection = function() {
      console.log('ronk');
      this.bgMusic.src = this.bgMusic.src.match(/yakkity-sax/) ? 'assets/drunken-lullabies.mp3' : 'assets/yakkity-sax.mp3';
      this.bgMusic.curentTime = 0;
      return this.bgMusic.play();
    };

    Assets.prototype.toggleBgMusicPlayback = function() {
      if (this.bgMusic.paused) {
        return this.bgMusic.play();
      } else {
        return this.bgMusic.pause();
      }
    };

    return Assets;

  })();

  if (!window.GAME_LOADED) {
    (new Game(new Assets)).run();
    window.GAME_LOADED = true;
  }

}).call(this);
